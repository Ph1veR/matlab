function y = lab3_Olegs_Silcenkovs(t)
if nargin == 0
    t = 0:0.01:8;
end
%t = 0:0.01:8;%nodefinesim kopigo t
%t_zero = 0:0.01:1.5;
t_zero_f = (t>=0)&(t<1.5);
t_zero = t(t_zero_f);
%t_noise = 1.5:0.01:3.5;
t_noise_f = (t>=1.5)&(t<3.5);
t_noise = t(t_noise_f);
%t_const = 3.5:0.01:5.5;
t_const_f = (t>=3.5)&(t<5.5);
t_const = t(t_const_f);
%t_saw = 5.5:0.01:6.5;
t_saw_f = (t>=5.5)&(t<6.5);
t_saw = t(t_saw_f);
%t_sin=6.5:0.01:8;
t_sin_f = (t>=6.5)&(t<=8);
t_sin = t(t_sin_f);
%% sinusoida
A0=0; A=2.5;
T = (8-6.5)/3;f=1/T;
delay = 6.5;
y_sin=A0+A*sin(2*pi*f*(t_sin-delay));
%plot(t_sin,y_sin)
%axis ([xmin xmax ymin ymax])
%axis([0 8 -3 3])
%% Konstantes signals
y_const = 2.5+zeros(size(t_const));
%plot(t_const,y_const)
%% Nulles signals
y_zero = zeros(size(t_zero));
%plot(t_zero,y_zero)
%% Linearais signals
%k = (yA-yB)/(tA-tB);
k = (-0.5-0)/(5.5-6.5);
delay = 6.5;
y_saw = k*(t_saw-delay);
%plot(t_saw,y_saw)
%% Troksna signals
y_noise = 2.5*rand(size(t_noise))-1.25;
%plot(t_noise,y_noise)
%% Visu signalu apvienosana
t = [t_zero,t_noise,t_const,t_saw,t_sin];
y = [y_zero,y_noise,y_const,y_saw,y_sin];
if nargout == 0
    plot(t,y)
    y=[];
end
axis([0 8 -3 3])
%% Secinajums;
%Saja darba es iemacijos zimet dazadus grafikus 
%un apvienot vinus
%vel iemacijos parveidot grafiku no koda uz funkciju
%saprotu, ka darboties ar dazadiem komandiem lai zimet dazadus grafikus
